#!/usr/bin/env ruby

# frozen_string_literal: true

require 'optparse'
require 'rubygems'
require 'bundler/setup'
require 'pry-byebug'

# Setup load path for application (makes you realise RubyGems spoils you...)
def setup_path(dir)
  load_path = File.expand_path(File.dirname(__FILE__) + "/../#{dir}")
  $LOAD_PATH.unshift(load_path) unless $LOAD_PATH.include?(load_path)
rescue StandardError => e
  puts e
  e.backtrace.each { |line| puts line }
  exit
end

setup_path('lib')

begin
  require 'walter/shared/log_actually'
  require 'walter/shared/yabber'
rescue LoadError => e
  puts 'Dependencies load error!'
  puts e
  e.backtrace.each { |line| puts line }
  exit
rescue StandardError => e
  puts 'Dependencies standard error?'
  puts e
  e.backtrace.each { |line| puts line }
  exit
end

LOGGER = LogActually.is_all_around(:default)
LOGGER.i
LogActually.is_all_around(:messaging)
LogActually.messaging.d

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: listen -h zeromq.local -p 5555'
  opts.on('-p PORT', 'Publisher PORT') do |p|
    options[:port] = p
  end

  opts.on('-h HOST', 'Publisher HOST') do |h|
    options[:host] = h
  end
end.parse!

options = options.map do |k, v|
  [k.to_sym, v]
end.to_h

LOGGER.info('bin') { 'Start setting up Subscriber...' }

begin
  LOGGER.info('bin') { 'Start' }
  Subscriber.params(options)
  loop do
    message = Subscriber.recv
    puts Time.now.strftime("%T")
    puts message
  end
rescue StandardError => e
  LOGGER.error('bin') { 'Dependencies standard error?' }
  LOGGER.error('bin') { e }
  e.backtrace.each { |line| LOGGER.error('bin') { line } }
rescue SignalException
  Signal.trap(0, proc { puts "Terminating: #{$$}" })
  return 1
end

LOGGER.info('bin') { 'Goodbyte!' }

exit
